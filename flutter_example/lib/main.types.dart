// GENERATED FILE - DO NOT EDIT
//
// This file was generated by applying the following macros to the
// `lib/main.gen.dart` file:
//
//   - Instance of 'FunctionalWidget'
//
// To make changes you should edit the `lib/main.gen.dart` file;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'macros/auto_listenable.dart';
import 'macros/functional_widget.dart';
import 'macros/render_accessors.dart';

class MyHomePage extends StatefulWidget {
  final ValueNotifier<int> counter;
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
  const MyHomePage(this.counter, {Key? key, required this.title})
      : super(key: key);
}

@autoListenable
class _MyHomePageState extends State<MyHomePage> {
  Color _color = Colors.blue;
  void _incrementCounter() {
    widget.counter.value++;
  }

  void _handleCounter() {
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: Text(super.widget.title)),
        body: Center(
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
              const Text('You have pushed the button this many times:'),
              Text('${widget.counter.value}',
                  style: Theme.of(context).textTheme.headline4),
              GestureDetector(
                  onTap: () {
                    setState(() {
                      _color = _color == Colors.blue ? Colors.red : Colors.blue;
                    });
                  },
                  child: SizedBox(
                      height: 100,
                      width: 100,
                      child: MyColoredFill(color: _color)))
            ])),
        floatingActionButton: FloatingActionButton(
            onPressed: _incrementCounter,
            tooltip: 'Increment',
            child: const Icon(Icons.add)));
  }
}

class MyColoredFill extends LeafRenderObjectWidget {
  final Color color;
  @override
  RenderObject createRenderObject(BuildContext context) {
    return MyColoredFillRenderBox(color: color);
  }

  @override
  void updateRenderObject(
      BuildContext context, MyColoredFillRenderBox renderObject) {
    renderObject.color = color;
  }

  const MyColoredFill({Key? key, required this.color}) : super(key: key);
}

class MyColoredFillRenderBox extends RenderBox {
  @RenderAccessors(needsPaint: true)
  Color _color;
  @override
  bool hitTestSelf(Offset position) => true;
  @override
  Size computeDryLayout(BoxConstraints constraints) {
    return constraints.biggest;
  }

  @override
  void paint(PaintingContext context, Offset offset) {
    context.canvas.drawRect(offset & size, Paint()..color = color);
  }

  MyColoredFillRenderBox({required Color color}) : _color = color;
  @override
  bool get sizedByParent => true;
}

void main() {
  var counterNotifier = ValueNotifier<int>(0);
  runApp(MyApp(counterNotifier));
}

class MyApp extends StatelessWidget {
  final ValueNotifier<int> counter;
  final String? appTitle;
  final String? homePageTitle;
  const MyApp(
    this.counter, {
    this.appTitle,
    this.homePageTitle,
    Key? key,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) => _buildApp(
        context,
        counter,
        appTitle: appTitle,
        homePageTitle: homePageTitle,
      );
}

@FunctionalWidget(widgetName: 'MyApp')
Widget _buildApp(BuildContext context, ValueNotifier<int> counter,
    {String? appTitle, String? homePageTitle}) {
  return MaterialApp(
      title: appTitle ?? 'Flutter Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: MyHomePage(counter,
          title: homePageTitle ?? 'Flutter Demo Home Page'));
}
